<?php

namespace Manager\Bundle\Entity;

use Doctrine\DBAL\Types\DateType;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * Company
 *
 * @ORM\Table()
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="Manager\Bundle\Entity\Repository\CompanyRepository")
 */
class Company implements \JsonSerializable
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     * @ORM\Column(name="email", type="string", length=255)
     * @Assert\NotBlank()
     * @Assert\Email()
     */
    private $email;

    /**
     * @var string $image
     * @Assert\File( maxSize = "1024k", mimeTypesMessage = "Please upload a valid Image")
     * @ORM\Column(name="image", type="string", length=255, nullable=true, options={"default": "empty.jpg"})
     */
    private $image;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="orgCode", type="string", length=255)
     */
    private $orgCode;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="address", type="string", length=255)
     */
    private $address;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="contact", type="string", length=255)
     */
    private $contact;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="phone", type="string", length=255)
     */
    private $phone;

    /**
     * @var string
     * @ORM\Column(name="comment", type="string", length=255, nullable=true)
     */
    private $comment;

    /**
     * @ORM\OneToMany(targetEntity="Note", mappedBy="company")
     */
    private $notes;

    /**
     * @ORM\ManyToOne(targetEntity="User",inversedBy="companies")
     * @ORM\JoinColumn(name="creatorId", referencedColumnName="id")
     */
    private $creator;

    /**
     * @ORM\ManyToMany(targetEntity="Step",inversedBy="companies")
     */
    private $step;

    /**
     * @ORM\OneToMany(targetEntity="Log", mappedBy="company")
     */
    private $logs;

    /**
     * @var boolean
     * @ORM\Column(name="rejected", type="boolean", options={"default":false})
     */
    private $rejected;

    /**
     * @var boolean
     * @ORM\Column(name="trashed", type="boolean", options={"default":false})
     */
    private $trashed;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="postalCode", type="string", length=255)
     */
    private $postalCode;

    /**
     * @var \DateTime
     * @Assert\NotBlank()
     * @ORM\Column(name="saleDate", type="datetime")
     */
    private $saleDate;

    /**
     * @var integer
     * @Assert\NotBlank()
     * @ORM\Column(name="price", type="string", length=255)
     */
    private $price;

    /**
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="product", type="string", length=255)
     */
    private $product;

    /**
     * @var \DateTime
     * @ORM\Column(name="created", type="datetime")
     */
    private $created;

    /**
     * @var \DateTime $updated
     * @ORM\Column(name="updated", type="datetime")
     */
    private $updated;

    /**
     * @ORM\OneToMany(targetEntity="Manager\Bundle\Entity\Document", mappedBy="company")
     */
    private $documents;

    private $updateWIthoutImage = false;



    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Company
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set orgCode
     *
     * @param string $orgCode
     * @return Company
     */
    public function setOrgCode($orgCode)
    {
        $this->orgCode = $orgCode;

        return $this;
    }

    /**
     * Get orgCode
     *
     * @return string 
     */
    public function getOrgCode()
    {
        return $this->orgCode;
    }

    /**
     * Set address
     *
     * @param string $address
     * @return Company
     */
    public function setAddress($address)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get address
     *
     * @return string 
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set contact
     *
     * @param string $contact
     * @return Company
     */
    public function setContact($contact)
    {
        $this->contact = $contact;

        return $this;
    }

    /**
     * Get contact
     *
     * @return string 
     */
    public function getContact()
    {
        return $this->contact;
    }

    /**
     * Set phone
     *
     * @param string $phone
     * @return Company
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string 
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set comment
     *
     * @param string $comment
     * @return Company
     */
    public function setComment($comment)
    {
        $this->comment = $comment;

        return $this;
    }

    /**
     * Get comment
     *
     * @return string 
     */
    public function getComment()
    {
        return $this->comment;
    }

    /**
     * Set creator
     *
     * @param string $creator
     * @return Company
     */
    public function setCreator($creator)
    {
        $this->creator = $creator;

        return $this;
    }

    /**
     * Get creator
     *
     * @return string 
     */
    public function getCreator()
    {
        return $this->creator;
    }

    /**
     * Set rejected
     *
     * @param boolean $rejected
     * @return Company
     */
    public function setRejected($rejected)
    {
        $rejected = $rejected == null ? false : $rejected;
        $this->rejected = $rejected;

        return $this;
    }

    /**
     * Get rejected
     *
     * @return boolean 
     */
    public function getRejected()
    {
        return $this->rejected == null ? null : $this->rejected;
    }

    /**
     * Set image
     *
     * @param string $image
     */
    public function setImage($image)
    {
        $this->image = $image;
    }

    /**
     * Get image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }


    /* Uploading image*/
    public function getFullImagePath() {
        return null === $this->image ? null : $this->getUploadRootDir(). $this->image;
    }

    protected function getUploadRootDir() {
        // the absolute directory path where uploaded documents should be saved
        return $this->getTmpUploadRootDir().$this->getId()."/";
    }

    protected function getTmpUploadRootDir() {
        // the absolute directory path where uploaded documents should be saved
        return __DIR__ . '/../../../../web/upload/';
    }

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function uploadImage() {
        //$this->setSaleDate(new \DateTime($this->saleDate." 00:00:00"));
        // the file property can be empty if the field is not required
        $this->updated = new \DateTime();
        if (null === $this->image) {
            return;
        }
        if(is_string($this->getImage()))
        {
            $this->updateWIthoutImage = true;
            return;
        }

        if(!$this->id){
            $this->image->move($this->getTmpUploadRootDir(), $this->image->getClientOriginalName());
        }else{
            $this->updateWIthoutImage = true;
            $this->image->move($this->getUploadRootDir(), $this->image->getClientOriginalName());
        }
        $this->setImage($this->image->getClientOriginalName());

    }

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function moveImage()
    {
        if (null === $this->image) {
            return;
        }
        if(!is_dir($this->getUploadRootDir())){
            mkdir($this->getUploadRootDir());
        }
        if(!$this->updateWIthoutImage)
        {
            copy($this->getTmpUploadRootDir().$this->image, $this->getFullImagePath());
            unlink($this->getTmpUploadRootDir().$this->image);
        }
    }

    /**
     * @ORM\PreRemove()
     */
    public function removeImage()
    {
        unlink($this->getFullImagePath());
        rmdir($this->getUploadRootDir());
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->logs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->created = new \DateTime();
        $this->updated = new \DateTime();
        $this->notes = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add logs
     *
     * @param \Manager\Bundle\Entity\Log $logs
     * @return Company
     */
    public function addLog(\Manager\Bundle\Entity\Log $logs)
    {
        $this->logs[] = $logs;

        return $this;
    }

    /**
     * Remove logs
     *
     * @param \Manager\Bundle\Entity\Log $logs
     */
    public function removeLog(\Manager\Bundle\Entity\Log $logs)
    {
        $this->logs->removeElement($logs);
    }

    /**
     * Get logs
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getLogs()
    {
        return $this->logs;
    }

    /**
     * Set trashed
     *
     * @param boolean $trashed
     * @return Company
     */
    public function setTrashed($trashed = false)
    {
        $this->trashed = $trashed;

        return $this;
    }

    /**
     * (PHP 5 &gt;= 5.4.0)<br/>
     * Specify data which should be serialized to JSON
     * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     */
    function jsonSerialize()
    {
        return [
            "id" => $this->getId(),
            "managerId" => $this->getCreator()->getId(),
            "name" => $this->getName(),
            "saleDate" => $this->getSaleDate()->format("c"),
            "orgNumber" => $this->getOrgCode(),
            "contact" => $this->getContact(),
            "email" => $this->getEmail(),
            "phone" => $this->getPhone(),
            "postal" => $this->getPostalCode(),
            "product" => $this->getProduct(),
            "price" => $this->getPrice()
        ];
    }



    /**
     * Get trashed
     *
     * @return boolean 
     */
    public function getTrashed()
    {
        return $this->trashed;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     * @return Company
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return Company
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * @ORM\PreUpdate()
     */
    private function itemUpdated()
    {
        $this->setUpdated(new \DateTime());
    }

    /**
     * @ORM\PrePersist()
     */
    private function itemAdded()
    {
        $this->setCreated(new \DateTime());
    }

    /**
     * Set postalCode
     *
     * @param string $postalCode
     * @return Company
     */
    public function setPostalCode($postalCode)
    {
        $this->postalCode = $postalCode;

        return $this;
    }

    /**
     * Get postalCode
     *
     * @return string 
     */
    public function getPostalCode()
    {
        return $this->postalCode;
    }

    /**
     * Set saleDate
     *
     * @param \DateTime $saleDate
     * @return Company
     */
    public function setSaleDate($saleDate)
    {
        $this->saleDate = $saleDate;

        return $this;
    }

    /**
     * Get saleDate
     *
     * @return \DateTime 
     */
    public function getSaleDate()
    {
        return $this->saleDate;
    }

    /**
     * Set price
     *
     * @param string $price
     * @return Company
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get price
     *
     * @return string 
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set product
     *
     * @param string $product
     * @return Company
     */
    public function setProduct($product)
    {
        $this->product = $product;

        return $this;
    }

    /**
     * Get product
     *
     * @return string 
     */
    public function getProduct()
    {
        return $this->product;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return Company
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Add step
     *
     * @param \Manager\Bundle\Entity\Step $step
     * @return Company
     */
    public function addStep(\Manager\Bundle\Entity\Step $step)
    {
        $this->step[] = $step;

        return $this;
    }

    /**
     * Remove step
     *
     * @param \Manager\Bundle\Entity\Step $step
     */
    public function removeStep(\Manager\Bundle\Entity\Step $step)
    {
        $this->step->removeElement($step);
    }

    /**
     * Get step
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getStep()
    {
        return $this->step;
    }

    public function setStep(\Manager\Bundle\Entity\Step $step)
    {
        $this->step = new \Doctrine\Common\Collections\ArrayCollection();
        $this->step[] = $step;
    }

    /**
     * Add note
     *
     * @param \Manager\Bundle\Entity\Note $note
     *
     * @return Company
     */
    public function addNote(\Manager\Bundle\Entity\Note $note)
    {
        $this->notes[] = $note;

        return $this;
    }

    /**
     * Remove note
     *
     * @param \Manager\Bundle\Entity\Note $note
     */
    public function removeNote(\Manager\Bundle\Entity\Note $note)
    {
        $this->notes->removeElement($note);
    }

    /**
     * Get notes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNotes()
    {
        return $this->notes;
    }
}
